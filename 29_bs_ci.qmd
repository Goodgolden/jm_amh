---
title: "Brier Score CI"
format: pdf
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE,
                      warnings = FALSE,
                      message = FALSE,
                      comment = "#>",
                      #results = "hide",
                      digits = 4,
                      error = FALSE)
## clean the R environment
graphics.off()
rm(list = ls())
freshr::freshr()
## load packages
library(here, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(gtsummary, quietly = TRUE)
library(flextable, quietly = TRUE)
## check the directory for the file
# here::dr_here()
here::set_here()
## the figure or results should be saved 
# paste0("foldername/Sfilename_workingresult_", 
#      Sys.Date(), ".filetype")
```

```{css, echo=FALSE}
.scroll-100 {
  max-height: 300px;
  max-width: 1000px;
  overflow-y: auto;
  background-color: inherit;
}
```

## Goal for this chapter

- [x] Redo the tables for AUC CI

- [x] Adding plots for the AUC CI

- [x] Redo the Brier S tables

- [x] Adding plots for Brier S CI

- [x] You are first-class!


## Load the data

I save each permutation separately, so I need to load all the separated files and 
then combine them into one dataset. This is not the best way of working but when 
the parallel processing does not work properly. This is the only way to make everything 
works.

```{r}
folder1 <- "auc"
folder2 <- "auc"
file_location <- paste0("results/", folder1, "/", folder2, "/")
files <- list.files(path = file_location, pattern = ".Rdata")
# files
pull_auc_train <- function(file_location, file1){
  load(paste0(file_location, file1))
  M <- map_amh$"auc_train" %>% as.matrix()
}
pull_auc_test <- function(file_location, file1){
  load(paste0(file_location, file1))
  M <- map_amh$"auc_test" %>% as.matrix()
}
pull_bs_train <- function(file_location, file1){
  load(paste0(file_location, file1))
  M <- map_amh$"bs_train" %>% as.matrix()
}
pull_bs_test <- function(file_location, file1){
  load(paste0(file_location, file1))
  M <- map_amh$"bs_test" %>% as.matrix()
}

train_auc <- map(files, ~pull_auc_train(file_location, .))
test_auc <- map(files, ~pull_auc_test(file_location, .))
train_bs <- map(files, ~pull_bs_train(file_location, .))
test_bs <- map(files, ~pull_bs_test(file_location, .))

```

Calculating all the quantiles and the mean and median for the Brier Score
Here we need to pull out each single cell in the matrix and then calculate the
quantiles based on each cell. This is a bit tricky but it is the only way to finish 
is to use the `apply()` with setting MARGIN = 1:2, for a matrix 1 indicates rows, 
2 indicates columns, c(1, 2) indicates rows and columns. 

```{r}
train_mean  <- apply(simplify2array(train_bs), 1:2, mean, na.rm = T)
train_sd  <- apply(simplify2array(train_bs), 1:2, sd, na.rm = T)
train_q.025 <- apply(simplify2array(train_bs), 1:2,
               function(x) try(quantile(x, 0.025, na.rm = T)))
train_q.975 <- apply(simplify2array(train_bs), 1:2, 
               function(x) try(quantile(x, 0.975, na.rm = T)))
train_q.05  <- apply(simplify2array(train_bs), 1:2, 
              function(x) try(quantile(x, 0.05, na.rm = T)))
train_q.95  <- apply(simplify2array(train_bs), 1:2, 
              function(x) try(quantile(x, 0.95, na.rm = T)))
train_q.10  <- apply(simplify2array(train_bs), 1:2, 
              function(x) try(quantile(x, 0.10, na.rm = T)))
train_q.90  <- apply(simplify2array(train_bs), 1:2, 
              function(x) try(quantile(x, 0.90, na.rm = T)))
train_q.25  <- apply(simplify2array(train_bs), 1:2,
              function(x) try(quantile(x, 0.25, na.rm = T)))
train_q.75  <- apply(simplify2array(train_bs), 1:2, 
              function(x) try(quantile(x, 0.75, na.rm = T)))
train_q.50  <- apply(simplify2array(train_bs), 1:2, 
              function(x) try(quantile(x, 0.50, na.rm = T)))

test_mean  <- apply(simplify2array(test_bs), 1:2, mean, na.rm = T)
test_sd  <- apply(simplify2array(test_bs), 1:2, sd, na.rm = T)
test_q.025 <- apply(simplify2array(test_bs), 1:2,
               function(x) try(quantile(x, 0.025, na.rm = T)))
test_q.975 <- apply(simplify2array(test_bs), 1:2, 
               function(x) try(quantile(x, 0.975, na.rm = T)))
test_q.05  <- apply(simplify2array(test_bs), 1:2, 
              function(x) try(quantile(x, 0.05, na.rm = T)))
test_q.95  <- apply(simplify2array(test_bs), 1:2, 
              function(x) try(quantile(x, 0.95, na.rm = T)))
test_q.10  <- apply(simplify2array(test_bs), 1:2, 
              function(x) try(quantile(x, 0.10, na.rm = T)))
test_q.90  <- apply(simplify2array(test_bs), 1:2, 
              function(x) try(quantile(x, 0.90, na.rm = T)))
test_q.25  <- apply(simplify2array(test_bs), 1:2,
              function(x) try(quantile(x, 0.25, na.rm = T)))
test_q.75  <- apply(simplify2array(test_bs), 1:2, 
              function(x) try(quantile(x, 0.75, na.rm = T)))
test_q.50  <- apply(simplify2array(test_bs), 1:2, 
              function(x) try(quantile(x, 0.5, na.rm = T)))

```

## BS CI summary Table

### Merge Dataset

For the plots with different start time and duration.

```{r}
pull_ci <- function(data, type, group) {
  results <- data %>%
  as.data.frame() %>%
  rownames_to_column(var = "Tstart") %>%
  mutate(type = type,
         group = group) %>%
  pivot_longer(cols = -c(Tstart, type, group),
               names_to = "Dt",
               values_to = "bs")
}

train_mean1 <- train_mean %>% pull_ci("mean", "train")
train_q.025 <- train_q.025 %>% pull_ci("q.025", "train")
train_q.05 <- train_q.05 %>% pull_ci("q.05", "train")
train_q.10 <- train_q.10 %>% pull_ci("q.10", "train")
train_q.25 <- train_q.25 %>% pull_ci("q.25", "train")
train_q.75 <- train_q.75 %>% pull_ci("q.75", "train")
train_q.90 <- train_q.90 %>% pull_ci("q.90", "train")
train_q.95 <- train_q.95 %>% pull_ci("q.95", "train")
train_q.975 <- train_q.975 %>% pull_ci("q.975", "train")
test_mean1 <- test_mean %>% pull_ci("mean", "test")
test_q.025 <- test_q.025 %>% pull_ci("q.025", "test")
test_q.05 <- test_q.05 %>% pull_ci("q.05", "test")
test_q.10 <- test_q.10 %>% pull_ci("q.10", "test")
test_q.25 <- test_q.25 %>% pull_ci("q.25", "test")
test_q.75 <- test_q.75 %>% pull_ci("q.75", "test")
test_q.90 <- test_q.90 %>% pull_ci("q.90", "test")
test_q.95 <- test_q.95 %>% pull_ci("q.95", "test")
test_q.975 <- test_q.975 %>% pull_ci("q.975", "test")

train_bs_data <- cbind(train_mean1, 
                        `2.5%` = unlist(train_q.025$bs), 
                        `5%` = unlist(train_q.05$bs),
                        `10%` = unlist(train_q.10$bs),
                        `25%` = unlist(train_q.25$bs), 
                        `75%` = unlist(train_q.75$bs), 
                        `90%` = unlist(train_q.90$bs),
                        `95%` = unlist(train_q.95$bs),
                        `97.5%` = unlist(train_q.975$bs)) %>%
  as.data.frame() %>%
  mutate(`50%` = bs) 

test_bs_data <- cbind(test_mean1, 
                        `2.5%` = unlist(test_q.025$bs), 
                        `5%` = unlist(test_q.05$bs),
                        `10%` = unlist(test_q.10$bs),
                        `25%` = unlist(test_q.25$bs), 
                        `75%` = unlist(test_q.75$bs), 
                        `90%` = unlist(test_q.90$bs),
                        `95%` = unlist(test_q.95$bs),
                        `97.5%` = unlist(test_q.975$bs)) %>%
  as.data.frame() %>%
  mutate(`50%` = bs) 
```

### Brier Score Plots 

The interval is very wide at the beginning, because we have very few events at the beginning. 
The sample size is very small, ending up with very wide confidence intervals.
but it is still good to have the interval to show how the AUC changed over time.
The comparison makes sense when we have a even larger sample size.

```{r}
plot1 <- train_bs_data %>%
  ggplot() +
  geom_line(aes(x = Dt, y = `2.5%`, group = Tstart),
              color = "#90e0ef", linetype = "dashed",
              alpha = 0.5) +
    geom_line(aes(x = Dt, y = `97.5%`, group = Tstart),
              color = "#90e0ef", linetype = "dashed",
              alpha = 0.5) +
    geom_ribbon(aes(x = Dt, 
                    ymin = `2.5%`, 
                    ymax = `97.5%`,
                    group = Tstart),
                fill = "#90e0ef",
                alpha = 0.5) +
  geom_line(aes(x = Dt, y = `5%`, group = Tstart),
              color = "#00b4d8", linetype = "dashed",
              alpha = 0.5) +
    geom_line(aes(x = Dt, y = `95%`, group = Tstart),
              color = "#00b4d8", linetype = "dashed",
              alpha = 0.5) +
    geom_ribbon(aes(x = Dt, 
                    ymin = `5%`, 
                    ymax = `95%`,
                    group = Tstart),
                fill = "#00b4d8",
                alpha = 0.5) +
    geom_line(aes(x = Dt, y = `10%`, group = Tstart),
              color = "#0077b6", linetype = "dashed",
              alpha = 0.5) +
    geom_line(aes(x = Dt, y = `90%`, group = Tstart),
              color = "#0077b6", linetype = "dashed",
              alpha = 0.5) +
    geom_ribbon(aes(x = Dt, 
                    ymin = `10%`, 
                    ymax = `90%`,
                    group = Tstart),
                fill = "#0077b6",
                alpha = 0.5) +
    geom_line(aes(x = Dt, y = `25%`, group = Tstart),
              color = "#03045e", linetype = "dashed",
              alpha = 0.5) +
    geom_line(aes(x = Dt, y = `75%`, group = Tstart),
              color = "#03045e", linetype = "dashed",
              alpha = 0.5) +
    geom_ribbon(aes(x = Dt, 
                    ymin = `25%`, 
                    ymax = `75%`,
                    group = Tstart),
                fill = "#03045e",
                alpha = 0.5) +
  geom_line(aes(x = Dt, y = `50%`, group = Tstart),
              color = "#fdc500", 
              linewidth = 0.5) +
  facet_wrap(~Tstart,
             labeller = labeller(
               Tstart = c("2" = "Starting Time 2nd year",
                          "3" = "Starting Time 3rd year",
                          "4" = "Starting Time 4th year",
                          "5" = "Starting Time 5th year",
                          "6" = "Starting Time 6th year",
                          "8" = "Starting Time 8th year"))) 
```


```{r}
plot2 <- test_bs_data %>%
  ggplot() +
  geom_line(aes(x = Dt, y = `2.5%`, group = Tstart),
              color = "#90e0ef", linetype = "dashed",
              alpha = 0.5) +
    geom_line(aes(x = Dt, y = `97.5%`, group = Tstart),
              color = "#90e0ef", linetype = "dashed",
              alpha = 0.5) +
    geom_ribbon(aes(x = Dt, 
                    ymin = `2.5%`, 
                    ymax = `97.5%`,
                    group = Tstart),
                fill = "#90e0ef",
                alpha = 0.5) +
  geom_line(aes(x = Dt, y = `5%`, group = Tstart),
              color = "#00b4d8", linetype = "dashed",
              alpha = 0.5) +
    geom_line(aes(x = Dt, y = `95%`, group = Tstart),
              color = "#00b4d8", linetype = "dashed",
              alpha = 0.5) +
    geom_ribbon(aes(x = Dt, 
                    ymin = `5%`, 
                    ymax = `95%`,
                    group = Tstart),
                fill = "#00b4d8",
                alpha = 0.5) +
    geom_line(aes(x = Dt, y = `10%`, group = Tstart),
              color = "#0077b6", linetype = "dashed",
              alpha = 0.5) +
    geom_line(aes(x = Dt, y = `90%`, group = Tstart),
              color = "#0077b6", linetype = "dashed",
              alpha = 0.5) +
    geom_ribbon(aes(x = Dt, 
                    ymin = `10%`, 
                    ymax = `90%`,
                    group = Tstart),
                fill = "#0077b6",
                alpha = 0.5) +
    geom_line(aes(x = Dt, y = `25%`, group = Tstart),
              color = "#03045e", linetype = "dashed",
              alpha = 0.5) +
    geom_line(aes(x = Dt, y = `75%`, group = Tstart),
              color = "#03045e", linetype = "dashed",
              alpha = 0.5) +
    geom_ribbon(aes(x = Dt, 
                    ymin = `25%`, 
                    ymax = `75%`,
                    group = Tstart),
                fill = "#03045e",
                alpha = 0.5) +
  geom_line(aes(x = Dt, y = `50%`, group = Tstart),
              color = "#fdc500", 
              linewidth = 0.5) +
  facet_wrap(~Tstart,
             labeller = labeller(
               Tstart = c("2" = "Starting Time 2nd year",
                          "3" = "Starting Time 3rd year",
                          "4" = "Starting Time 4th year",
                          "5" = "Starting Time 5th year",
                          "6" = "Starting Time 6th year",
                          "8" = "Starting Time 8th year"))) 
```

```{r}
#| warning: false
plot1 +
  labs(title = "SWAN-AMH Brier Score and CIs (wrap by starting time) Training") +
  theme_minimal() +
  xlab("Length of Time Interval (years)") +
  ylab("AUC") +
  theme(legend.position = "none",
        # panel.grid = element_blank(),
        # plot.margin = margin(t = 20, b = 8),
        # axis.text = element_blank(),
        # axis.title = element_blank(),
        strip.text = element_text(hjust = 0.5,
                                  lineheight = 0.1))

plot2 +
  labs(title = "SWAN-AMH Brier Score and CIs (wrap by starting time) Testing") +
  theme_minimal() +
  xlab("Length of Time Interval (years)") +
  ylab("AUC") +
  theme(legend.position = "none",
        # panel.grid = element_blank(),
        # plot.margin = margin(t = 20, b = 8),
        # axis.text = element_blank(),
        # axis.title = element_blank(),
        strip.text = element_text(hjust = 0.5,
                                  lineheight = 0.1))
```


### Brier Score only

```{r}
#| label: bs_plot
#| warning: false
#| fig-cap: "bs plot for SWAN-AMH Tstart"

bs_tstart <- test_bs_data %>% 
  mutate(Tstart = rep(c(paste0("Year", c(2, 3, 4, 5 ,6, 8))), each = 5)) %>%
  ggplot() +
  geom_line(aes(x = Dt, y = `50%`,
                group = Tstart, 
                color = Tstart),
              linewidth = 1) +
  geom_point(aes(x = Dt, y = `50%`,
                group = Tstart, 
                color = Tstart),
              size = 2.5) +
  geom_point(aes(x = Dt, y = `50%`,
                group = Tstart),
              color = "white",
              size = 1,
             alpha = 0.5) 
# c("c("#D9D9D9", "#C9C9C9", "#E5E5E5")", "#FFFFFF", "#FFFFFF")
```

```{r}
#| label: bs_plot2
#| warning: false
#| fig-cap: "bs plot for SWAN-AMH Dt"


bs_dt <- test_bs_data %>%
  mutate(Tstart = rep(c(paste0("Year", c(2, 3, 4, 5 ,6, 8))), each = 5)) %>%
  mutate(Dt = as.character(Dt)) %>%
  ggplot() +
  geom_line(aes(x = Tstart, y = `50%`,
                group = Dt, 
                color = Dt),
              linewidth = 1) +
  geom_point(aes(x = Tstart, y = `50%`,
                group = Dt, 
                color = Dt),
              size = 2.5) +
  geom_point(aes(x = Tstart, y = `50%`,
                group = Dt),
              color = "white",
              size = 1,
             alpha = 0.5) 
# c("c("#D9D9D9", "#C9C9C9", "#E5E5E5")", "#FFFFFF", "#FFFFFF")
```

```{r fig.show="hold", out.width="100%"}
#| layout-ncol: 2
#| warning: false
bs_tstart +
  labs(title = "SWAN-AMH Brier Score") +
  theme_minimal() +
  xlab("Length of Time Interval") +
  ylab("bs") +
  ggthemes::scale_colour_tableau("Jewel Bright") +
  theme(legend.position = c(0.93, 0.3),
        # legend.background = element_rect(fill = "#C9C9C9", 
        #                           size = 0.5,
        #                           color = "#C9C9C9"),
        # plot.background = element_rect(fill = "#C9C9C9",
        #                                color = "#C9C9C9"),
        # panel.grid = element_blank(),
        # plot.margin = margin(t = 20, b = 8),
        # axis.text = element_blank(),
        # axis.title = element_blank(),
        strip.text = element_text(hjust = 0.5,
                                  lineheight = 0.1))
bs_dt +
  labs(title = "SWAN-AMH Brier Score") +
  theme_minimal() +
  xlab("Start Time") +
  ylab("bs") +
  ggthemes::scale_colour_tableau("Jewel Bright") +
  theme(legend.position = c(0.93, 0.30),
        # legend.background = element_rect(fill = "#C9C9C9", 
        #                           size = 0.5,
        #                           color = "#C9C9C9"),
        # plot.background = element_rect(fill = "#C9C9C9",
        #                                color = "#C9C9C9"),
        # panel.grid = element_blank(),
        # plot.margin = margin(t = 20, b = 8),
        # axis.text = element_blank(),
        # axis.title = element_blank(),
        strip.text = element_text(hjust = 0.5,
                                  lineheight = 0.1))
```

