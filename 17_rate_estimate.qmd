---
title: "Slope Estimate"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      warnings = FALSE,
                      message = FALSE,
                      comment = "",
                      cache = TRUE,
                      #results = "hide",
                      digits = 4,
                      error = FALSE)

# ## clean the R environment
# graphics.off()
# rm(list = ls())
# freshr::freshr()

## load packages
library(here, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(plyr, quietly = TRUE)
library(JMbayes2, quietly = TRUE)
library(auRoc, quietly = TRUE)
devtools::load_all()

## check the directory for the file
# here::dr_here()
here::set_here()

```

```{css, "css-setup", echo=FALSE}
.scroll-100 {
  max-height: 300px;
  max-width: 1000px;
  overflow-y: auto;
  background-color: inherit;
}
```

## To-do list

-   [x] Estimates from the Value-Rate model

-   [x] posterior SD, CI for the `slope(lamh)`

-   [x] `r praise::praise()`

## Model

Pull out the MCMC for the random slope term from the joint model.
Calculate the posterior standard deviation for the random slope term.
Then take a mean value of the standard deviation for the random slope


```{r}
#| eval: false

control = lmeControl(opt = "optim")
jmcontrol <- list(n_iter = 200000, 
                  n_burnin = 100000, 
                  n_thin = 5,
                  n_chains = 4,
                  save_random_effects = TRUE,
                  seed = 55555,
                  cores = 4)

lme1 <- lme(lamh ~ time,
                data = swan_amh03,
                control = control,
                random = ~ time| id)

surv17 <- coxph(Surv(etime, event) ~ 
                  0 + # alcohol +
                  bmi + # bc_pills + 
                  # children +
                  # edu + 
                  # employed +
                  # health +
                  # married + 
                  phys_act + 
                  ethnic_black + ethnic_chine + ethnic_hispa + ethnic_japan + 
                  site_c + site_m + site_nj + site_p + site_ucd + site_ucla + 
                  smoke_current_smoker + smoke_past_only,
                data = swan_amh13, 
                x = TRUE,
                model = TRUE)

jmb2.117.value.rate <- JMbayes2::jm(Surv_object = surv17,
                                  Mixed_objects = lme1, 
                                  functional_forms = list("lamh" = ~ value(lamh) + slope(lamh)),
                                  time_var = "time",
                                  control = jmcontrol) 

save(jmb2.117.value.rate,
     file = "results/jmbayes2_117_10k_4.Rdata")

```



## Estimates

- `ggtraceplot()`:
Plots the evolution of the estimated parameter vs. iterations in a fitted joint model using ggplot2.

- `gelman_diag()`: 
Calculates the potential scale reduction factor for the estimated parameters in a fitted joint model, together with the upper confidence limits.

- `ggtraceplot()`: 
Plots the evolution of the estimated parameter vs. iterations in a fitted joint model using ggplot2.

- `gelman_diag()`: 
Calculates the potential scale reduction factor for the estimated parameters in a fitted joint model, together with the upper confidence limits.

```{r}
#| eval: false

load("results/jmbayes2_117_10k_4.Rdata")

ggdensityplot(jmb2.117.value.rate,
              parm = "alphas", 
              grid = TRUE)

ggtraceplot(jmb2.117.value.rate,
            parm = "alphas", 
            grid = TRUE)

JMbayes2::traceplot(jmb2.117.value.rate,
            parm = "alphas")

# cumuplot(jmb2.117.value.rate,
#          parm = "alphas",
#          grid = TRUE)
```


```{r}
load("results/jmbayes2_117_10k_4.Rdata")
# View(jmb2.117.value.rate$mcmc)
random <- jmb2.117.value.rate$mcmc$b[[1]]

random_intercept <- random[, 1, ]
random_slope <- random[, 2, ]

random_int_sd <- apply(random_intercept, 1, sd)
random_slope_sd <- apply(random_slope, 1, sd)

random_int_mu <- apply(random_intercept, 1, mean)
random_slope_mu <- apply(random_slope, 1, mean)

cat("The mean of mu(random_int)", 
    mean(random_int_mu), ";\n")

cat("The mean of mu(random_slope)",
    mean(random_slope_mu), ";\n")


cat("The mean of SD(random_int)", 
    mean(random_int_sd), 
    ";\n the median of SD(random_int)",
    median(random_int_sd), "\n")

cat("The mean of SD(random_slope)",
    mean(random_slope_sd), 
    ";\n the median of SD(random_slope)",
    median(random_slope_sd), "\n")

```



```{r fig.show="hold", out.width="50%"}
#| layout-ncol: 2
hist(random_int_sd)
hist(random_slope_sd)
```


```{r}
summary(jmb2.117.value.rate)

cat("The fixed effect of slope has posterior mean -0.5878543 and SD 0.01045003;\n")
```

Hence,  we have the final results for the variability of the slope term.

- The random effect slope term based on MCMC is $\sigma_{\beta_1}$ = `r mean(random_slope_sd)`; 

- The fixed effect slope term $\sigma_{b_1}$ = `r summary(jmb2.117.value.rate)$Outcome[2, 2]`; 

- We have the pooled $\sigma_{b1 + \beta1}$ = `r sqrt(summary(jmb2.117.value.rate)$Outcome[2, 2]^2 + mean(random_slope_sd)^2)`.

- The 95% CI for the slope term is (`r mean(random_slope_sd) - 1.96 * sqrt(summary(jmb2.117.value.rate)$Outcome[2, 2]^2 + mean(random_slope_sd)^2)`, `r mean(random_slope_sd) + 1.96 * sqrt(summary(jmb2.117.value.rate)$Outcome[2, 2]^2 + mean(random_slope_sd)^2)`)


-  [x]  `r praise::praise()`



























